<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= room.roomName %> - Seol9u</title>
    <link href="/main.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.5/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <%- include('nav.ejs')%>

    <div class="container">
        <div class="chat-bg">
            <header class="chat-nav">
                <h2><%= room.roomName %></h2>
                <a href="/chat/list">채팅 목록</a>
            </header>

            <div class="chat-screen" id="chatScreen">
                <!-- 채팅 메시지들이 여기에 표시됩니다 -->
            </div>
        </div>
        
        <div class="chat-form">
            <input class="chat-input" id="messageInput" placeholder="메시지를 입력하세요...">
            <button class="chat-button" id="sendButton">전송</button>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/socket.io@4.7.2/client-dist/socket.io.min.js"></script>
    <script>
        const socket = io();
        const chatScreen = document.getElementById('chatScreen');
        const messageInput = document.getElementById('messageInput');
        const sendButton = document.getElementById('sendButton');

        // 소켓 연결 및 채팅방 참여
        socket.emit('ask-join', '<%=room._id%>');

        // 메시지 전송
        function sendMessage() {
            const msg = messageInput.value.trim();
            if (!msg) return;

            socket.emit('message-send', {
                msg: msg,
                room: '<%=room._id%>',
                user: '<%=user._id%>',
                username: '<%=user.username%>',
                sentAt: new Date()
            });

            messageInput.value = '';
        }

        // 전송 버튼 클릭 이벤트
        sendButton.addEventListener('click', sendMessage);

        // Enter 키 이벤트
        messageInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });

        // 실시간 메시지 수신
        socket.on('message-broadcast', (data) => {
            addMessage(data);
        });

        // 이전 대화 불러오기
        fetch('/chat/messages?roomId=<%= room._id %>')
            .then(response => response.json())
            .then(messages => {
                messages.forEach(message => {
                    addMessage(message);
                });
                scrollToBottom();
            })
            .catch(error => console.error('메시지 불러오기 오류:', error));

        // 메시지를 화면에 추가하는 함수
        function addMessage(message) {
            const isMine = message.user.toString() === '<%= user._id %>';
            const messageBox = document.createElement('div');
            messageBox.className = `chat-box ${isMine ? 'mine' : ''}`;
            messageBox.innerHTML = `<span>${message.msg}</span>`;
            
            chatScreen.appendChild(messageBox);
            scrollToBottom();
        }

        // 채팅 화면을 맨 아래로 스크롤
        function scrollToBottom() {
            chatScreen.scrollTop = chatScreen.scrollHeight;
        }
    </script>
</body>
</html>